@namespace DSD.MSS.Blazor.Components.Core
@using Microsoft.AspNetCore.Components
@using System.Linq.Expressions;
@typeparam T
@inherits InputBase<bool>

<div class="form-group">
    <InputCheckbox id="@Id" name="@Id" class="@CssClass" @bind-Value="CurrentValue" @oninput="this.OnChangeAsync" />
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label for="@Id" class="@($"form-label {Required}")">@Label</label>
    }
    <ValidationMessage For="@ValidationFor" />
</div>

@code{

    /// <summary>
    /// Specifies the Field ID
    /// </summary>
    [Parameter] public string Id { get; set; }

    /// <summary>
    /// Specifies the Field Label
    /// </summary>
    [Parameter] public string Label { get; set; }

    /// <summary>
    /// Define the validation expression.
    /// </summary>
    [Parameter] public Expression<Func<T>> ValidationFor { get; set; }

    /// <summary>
    /// Specifies whether this field is required.
    /// </summary>
    [Parameter] public string Required { get; set; }

    /// <summary>
    /// The callback that is called when the checkbox is checked or unchecked.
    /// </summary>
    [Parameter] public EventCallback<ChangeEventArgs> OnChange { get; set; }

    protected override bool TryParseValueFromString(string value, out bool result, out string validationErrorMessage)
    {
        if (typeof(bool) == typeof(string))
        {
            result = (bool)(object)bool.Parse(value);
            validationErrorMessage = null;

            return true;
        }

        throw new InvalidOperationException($"{GetType()} does not support the type '{typeof(T)}'.");
    }

    /// <summary>
    /// Handle onchange event.
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    protected virtual async Task OnChangeAsync(ChangeEventArgs e)
    {
        await this.OnChange.InvokeAsync(e);
    }
}