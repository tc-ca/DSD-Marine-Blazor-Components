@inject IStringLocalizer<ContactInfoForm> L
@inject IOptions<AddressApi> options
@inject IConfiguration config
@inject ILogger<CPAddressLookup<string>> logger

    <EditForm Model="Model">
        <div>
        @*<div class="form-row">
            <div class="col-12 col-md-6">
                <label for="@($"{Model.Index}_{nameof(Model.CompanyName)}")">@L["CompanyName"]</label>
                <InputText class="form-control" @bind-Value="Model.CompanyName" id="@($"{Model.Index}_{nameof(Model.CompanyName)}")" />
            </div>
            <div class="col-12 col-md-6">
                <label for="@($"{Model.Index}_{nameof(Model.BusinessNumber)}")">@L["BusinessNumber"]</label>
                <InputText class="form-control" @bind-Value="Model.BusinessNumber" id="@($"{Model.Index}_{nameof(Model.BusinessNumber)}")" />
            </div>
        </div>*@
        @*<br />*@
        @*<div class="form-row">
            <div class="col-12 col-md-6">
                <label for="@($"{Model.Index}_{nameof(Model.FirstName)}")">@L["FirstName"]</label>
                <InputText class="form-control" @bind-Value="Model.FirstName" id="@($"{Model.Index}_{nameof(Model.FirstName)}")" />
            </div>
            <div class="col-12 col-md-6">
                <label for="@($"{Model.Index}_{nameof(Model.LastName)}")">@L["LastName"]</label>
                <InputText class="form-control" @bind-Value="Model.LastName" id="@($"{Model.Index}_{nameof(Model.LastName)}")" />
            </div>
        </div>*@
        @*<br />*@
        </div>
        <div class="form-group">
            <label for="@($"{Model.Index}_{nameof(Model.AddressLine1)}")">@L["AddressLine1"]</label>
            <CPAddressLookup @bind-Value="Model.AddressLine1" id="@($"{Model.Index}_{nameof(Model.AddressLine1)}")"
                             ValidationFor="() => Model.AddressLine1" CanadaPostApiKey="@apiOpts.APIKey" Language="@Language" 
                             AddressRetrieved="e => AddressSelected(e)" placeholder="Start typing your address..."
                             CountryIso3="@Model.AddressCountry" CountryChanged="(e) => LookupCountryChangedAsync(e)"
                             MaximumSuggestionsFromGroupedAddresses="apiOpts.MaxGroupSuggestions" Logger="logger" />
        </div>
        <br />
        <label for="@($"{Model.Index}_{nameof(Model.AddressLine2)}")">@L["AddressLine2"]</label>
        <InputText class="form-control" @bind-Value="Model.AddressLine2" id="@($"{Model.Index}_{nameof(Model.AddressLine2)}")" />
        <br />
        <label for="@($"{Model.Index}_{nameof(Model.AddressCity)}")">@L["AddressCity"]</label>
        <InputText class="form-control" @bind-Value="Model.AddressCity" id="@($"{Model.Index}_{nameof(Model.AddressCity)}")" />

        <br />
        <div class="form-row dropsize">

            <div class="col-12 col-md-4" disabled>
                <label for="@($"{Model.Index}_{nameof(Model.AddressCountry)}")">@L["AddressCountry"]</label>
                <InputText Label="@L["AddressCountry"]" @bind-Value="Model.AddressCountry" id="@($"{Model.Index}_{nameof(Model.AddressCountry)}")" class="form-control" />
            </div>
            <div class="col-12 col-md-4">
                <label for="@($"{Model.Index}_{nameof(Model.AddressProvince)}")">@L["AddressProvince"]</label>
                <InputText class="form-control" @bind-Value="Model.AddressProvince" id="@($"{Model.Index}_{nameof(Model.AddressProvince)}")" />
            </div>
            <div class="col-12 col-md-4">
                <label for="@($"{Model.Index}_{nameof(Model.AddressPostalCode)}")">@L["AddressPostalCode"]</label>
                <InputText class="form-control postcode" @bind-Value="Model.AddressPostalCode" id="@($"{Model.Index}_{nameof(Model.AddressPostalCode)}")" />
            </div>
        </div>

        <br />
        <div class="form-row">
            <div class="col-12 col-md-8">
                <label for="@($"{Model.Index}_{nameof(Model.Email)}")">@L["Email"]</label>
                <InputText class="form-control" @bind-Value="Model.Email" Label="@L["Email"]" id="@($"{Model.Index}_{nameof(Model.Email)}")" />
            </div>
            <div class="col-12 col-md-4">
                <label for="@($"{Model.Index}_{nameof(Model.ExtNumber)}")">@L["ExtNumber"]</label>
                <InputText class="form-control" @bind-Value="Model.ExtNumber" id="@($"{Model.Index}_{nameof(Model.ExtNumber)}")" maxlength="@ExtNumberMaxLength" />
            </div>
        </div>

    </EditForm>

@code {
    [Parameter]
    public string Title { get; set; }

    public int ExtNumberMaxLength { get; set; }

    [Parameter]
    public ContactInfo Model { get; set; }

    [Parameter]
    public string Language { get; set; }

    [Parameter]
    public EventCallback<bool> FormEditedCallback { get; set; }

    private AddressApi apiOpts;

    private Dictionary<string, object> Attributes;


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        apiOpts = options.Value;

        Attributes = new Dictionary<string, object>()
    {
            { "MaximumSuggestion", apiOpts.MaxSuggestions },
            { "placeholder", L["AddressLookupPlaceholder"] }
        };
        ExtNumberMaxLength = config.GetValue<int>("ExtNumberMaxLength");
    }

    private async Task LookupCountryChangedAsync(string country)
    {
        country = string.IsNullOrEmpty(country) ? "tcr" : country;
        await Task.FromResult(Model.AddressCountry = country);
        if (!string.IsNullOrEmpty(country) && country != "tcr")
        {
            //Model.Provinces = await contactInfoService.GetProvincesByCountryCode(country);
            //Model.AddressProvince = Model.Provinces != null && Model.Provinces.Any() ? "tcp" : default;
        }
        else
        {
            //Model.Provinces = new List<Province>();
        }
    }

    protected void AddressSelected(CPCompleteAddress a)
    {
        if (!string.IsNullOrEmpty(a.SubBuilding) && !string.IsNullOrWhiteSpace(a.SubBuilding))
        {
            if (apiOpts.PrefixBuildingNumberWithSub)
            {
                Model.AddressLine1 = $"{a.SubBuilding}-{a.BuildingNumber} {a.Street}";
                Model.AddressLine2 = "";
            }
            else
            {
                Model.AddressLine1 = $"{a.BuildingNumber} {a.Street}";
                Model.AddressLine2 = $"{L["AddressLine2Prefix"]} { a.SubBuilding}";
            }
        }
        else
        {
            Model.AddressLine1 = $"{a.BuildingNumber} {a.Street}";
            Model.AddressLine2 = "";
        }

        Model.AddressCity = a.City;

        Model.AddressProvince = a.CountryIso3 == "CAN" || a.CountryIso3 == "USA" ?
                                a.ProvinceCode : a.ProvinceName;

        Model.AddressPostalCode = a.PostalCode;

        Model.AddressCountry = a.CountryIso3;

    }
}
