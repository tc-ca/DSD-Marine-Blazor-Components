@inject IStringLocalizer<ContactInfoForm> L
@inject IOptions<AddressApi> options
@inject IConfiguration config
@inject ILogger<CPAddressLookup<string>> logger

<EditForm Model="Model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="@($"{Model.Index}_{nameof(Model.AddressLine1)}")" class="form-label">@L["AddressLine1"]</label>
        <CPAddressLookup @bind-Value="Model.AddressLine1" id="@($"{Model.Index}_{nameof(Model.AddressLine1)}")"
                         ValidationFor="() => Model.AddressLine1" RefererURL="@apiOpts.RefererURL" CanadaPostApiKey="@apiOpts.APIKey" Language="@Language"
                         AddressRetrieved="e => AddressSelected(e)" placeholder="Start typing your address..."
                         CountryIso3="@Model.AddressCountry" CountryChanged="(e) => LookupCountryChangedAsync(e)"
                         MaximumSuggestionsFromGroupedAddresses="apiOpts.MaxGroupSuggestions" Logger="logger" />

        <br />
        <label for="@($"{Model.Index}_{nameof(Model.AddressLine2)}")">@L["AddressLine2"]</label>
        <InputText class="form-control" @bind-Value="Model.AddressLine2" id="@($"{Model.Index}_{nameof(Model.AddressLine2)}")" />
        <br />
        <label for="@($"{Model.Index}_{nameof(Model.AddressCity)}")">@L["AddressCity"]</label>
        <InputText class="form-control" @bind-Value="Model.AddressCity" id="@($"{Model.Index}_{nameof(Model.AddressCity)}")" />

        <br />
        <div class="form-row dropsize">

            <div class="col-12 col-md-4" disabled>
                <label for="@($"{Model.Index}_{nameof(Model.AddressCountry)}")">@L["AddressCountry"]</label>
                <InputText Label="@L["AddressCountry"]" @bind-Value="Model.AddressCountry" id="@($"{Model.Index}_{nameof(Model.AddressCountry)}")" class="form-control" />
            </div>
            <div class="col-12 col-md-4">
                <label for="@($"{Model.Index}_{nameof(Model.AddressProvince)}")">@L["AddressProvince"]</label>
                <InputText class="form-control" @bind-Value="Model.AddressProvince" id="@($"{Model.Index}_{nameof(Model.AddressProvince)}")" />
            </div>
            <div class="col-12 col-md-4">
                <label for="@($"{Model.Index}_{nameof(Model.AddressPostalCode)}")">@L["AddressPostalCode"]</label>
                <InputText class="form-control postcode" @bind-Value="Model.AddressPostalCode" id="@($"{Model.Index}_{nameof(Model.AddressPostalCode)}")" />
            </div>
        </div>

        <br />
        <div class="form-row">
            <div class="col-12 col-md-8">
                <label for="@($"{Model.Index}_{nameof(Model.Email)}")">@L["Email"]</label>
                <InputText class="form-control" @bind-Value="Model.Email" Label="@L["Email"]" id="@($"{Model.Index}_{nameof(Model.Email)}")" />
            </div>
            <div class="col-12 col-md-4">
                <label for="@($"{Model.Index}_{nameof(Model.ExtNumber)}")">@L["ExtNumber"]</label>
                <InputText class="form-control" @bind-Value="Model.ExtNumber" id="@($"{Model.Index}_{nameof(Model.ExtNumber)}")" maxlength="@ExtNumberMaxLength" />
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary ml-1">@L["Submit"]</button>
</EditForm>

@code {
    [Parameter]
    public string Title { get; set; }

    public int ExtNumberMaxLength { get; set; }

    [Parameter]
    public ContactInfo Model { get; set; }

    [Parameter]
    public string Language { get; set; }

    [Parameter]
    public EventCallback<bool> FormEditedCallback { get; set; }

    private AddressApi apiOpts;

    private Dictionary<string, object> Attributes;


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        apiOpts = options.Value;

        Attributes = new Dictionary<string, object>()
{
            { "MaximumSuggestion", apiOpts.MaxSuggestions },
            { "placeholder", L["AddressLookupPlaceholder"] }
        };
        ExtNumberMaxLength = config.GetValue<int>("ExtNumberMaxLength");
    }

    private async Task LookupCountryChangedAsync(string country)
    {
        country = string.IsNullOrEmpty(country) ? "tcr" : country;
        await Task.FromResult(Model.AddressCountryCode = country);
        if (!string.IsNullOrEmpty(country) && country != "tcr")
        {
            //Model.Provinces = await contactInfoService.GetProvincesByCountryCode(country);
            //Model.AddressProvince = Model.Provinces != null && Model.Provinces.Any() ? "tcp" : default;
        }
        else
        {
            //Model.Provinces = new List<Province>();
        }
    }

    protected void AddressSelected(CPCompleteAddress address)
    {
        if (address == null)
        {
            Model.AddressLine1 = string.Empty;
            Model.AddressLine2 = string.Empty;
            Model.AddressCity = string.Empty;
            Model.AddressProvince = string.Empty;
            Model.AddressPostalCode = string.Empty;
            Model.AddressCountry = string.Empty;
            return;
        }

        if (!string.IsNullOrEmpty(address.SubBuilding) && !string.IsNullOrWhiteSpace(address.SubBuilding))
        {
            if (apiOpts.PrefixBuildingNumberWithSub)
            {
                Model.AddressLine1 = $"{address.SubBuilding}-{address.BuildingNumber} {address.Street}";
                Model.AddressLine2 = "";
            }
            else
            {
                Model.AddressLine1 = $"{address.BuildingNumber} {address.Street}";
                Model.AddressLine2 = $"{L["AddressLine2Prefix"]} { address.SubBuilding}";
            }
        }
        else if (!string.IsNullOrWhiteSpace(address.POBoxNumber))
        {
            Model.AddressLine1 = address.Line1;
            Model.AddressLine2 = "";
        }
        else
        {
            Model.AddressLine1 = $"{address.BuildingNumber} {address.Street}";
            Model.AddressLine2 = "";
        }

        Model.AddressCity = address.City;

        Model.AddressProvince = address.CountryIso3 == "CAN" || address.CountryIso3 == "USA" ?
                                address.ProvinceCode : address.ProvinceName;

        Model.AddressPostalCode = address.PostalCode;

        Model.AddressCountry = address.CountryName;

    }

    private void HandleValidSubmit()
    {

    }
}
