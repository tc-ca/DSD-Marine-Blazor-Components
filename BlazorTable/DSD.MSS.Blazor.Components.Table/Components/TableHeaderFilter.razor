@using Blazorade.Bootstrap.Components
@using Blazorade.Bootstrap.Components.Utilities
@using Blazorade.Bootstrap.Components.Content
@using Microsoft.AspNetCore.Components.Forms
@namespace DSD.MSS.Blazor.Components.Table
@typeparam TableItem

@if (this.ShowClearFilterOnTop)
{
<div class="mb-3 mt-3">
    <span style="font-weight:normal">Filters</span>
    <button class="btn btn-light" type="button" @onclick="(() => OnCancelClicked())"
            aria-label="@Resources.SharedResources.ResourceManager.GetString("ClearFilters", Resources.SharedResources.Culture)">Clear filters</button>
</div>
}

<div class="d-flex flex-row" id="ConfigModal">
    <Modal @ref="this.ConfigureModal" Backdrop="Backdrop.Static" Header="Table Settings" Size="ModalSize.Default">
        <HeaderTemplate>
            <ModalHeader BackgroundColor="NamedColor.Primary" Padding="2" TextColor="NamedColor.Light">
                <Heading Level="HeadingLevel.H5">@context</Heading>
                <ModalCloseIcon />
            </ModalHeader>
        </HeaderTemplate>
        <BodyTemplate Context="childcontext">
            <Card class="pl-2 pr-2 pb-0">
                <EditForm Model="TableRef.Columns" Context="contextValue">
                    <div class="scrollable-checklist">
                        <div>
                            <span class="mb-2">Show Columns</span>
                            <ul class="checkbox-menu allow-focus text-btn-item" style="list-style: none; margin-bottom: 0px">
                                @foreach (var item in TableRef.Columns)
                                {
                                    <li>
                                        <label>
                                            <InputCheckbox id="@item" name="@item" @bind-Value="item.ShowColumn" @oninput="args => { OnConfigureChecked(item, args.Value); }" />@item.Title
                                        </label>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </EditForm>
            </Card>
        </BodyTemplate>
    </Modal>
</div>

<div class="d-flex flex-row flex-grow mb-2" style="background-color: #F6F7F9">
    <div id="search" class="form-group d-flex flex-row icon-search flex-noshrink ml-2 mt-2 mb-2" style="color: white !important">
        <span class="fas fa-search ml-2 mr-2 form-control-span"></span>
        <input type="text" class="form-control form-control-sm float-left" aria-labelledby="search"
               @bind="@TableRef.GlobalSearch" @oninput="@(x => { TableRef.GlobalSearch = x.Value.ToString(); TableRef.Update(); })" placeholder="@TableRef.SearchPlaceHolderText" />
    </div>
    <div class="d-flex flex-row ml-auto">

        @foreach (TableItem item in TableRef.Items)
        {
            @foreach (IColumn<TableItem> column in TableRef.Columns)
            {
                if (column.ShowHeaderRowFilterable)
                {
                    var value = column.Render(item);
                    if (!string.IsNullOrEmpty(value) && !column.ColumnFilterItems.Contains(value))
                    {
                        column.ColumnFilterItems.Add(value);
                    }
                }
            }
        }

        @foreach (IColumn<TableItem> column in TableRef.Columns)
        {
            @if (column.ShowHeaderRowFilterable)
            {
                <div class="dropdown ml-2 pr-3 d-flex flex-row flex-noshrink">
                    <button class="text-btn dropdown-toggle" type="button" data-toggle="dropdown">
                        @column.Title
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu checkbox-menu allow-focus text-btn-item">
                        @foreach (var item in column.ColumnFilterItems)
                        {
                            <li>
                                <label>
                                    <input type="checkbox"
                                           checked="@column.ColumnFilterSelectedItems.Contains(item)"
                                           @onchange="args => { OnCheckboxClicked(column, item, args.Value); }">@item
                                    </label>
                                </li>
                            }
                    </ul>
                </div>
            }
            column.ColumnFilterItems.Clear();
        }
        @if (!this.ShowClearFilterOnTop)
        {
        <div class="ml-2 pr-1 d-flex flex-row flex-noshrink" style="line-height: 2.75rem;">
            <button class="btn" type="button" @onclick="(() => OnCancelClicked())"
                    aria-label="@Resources.SharedResources.ResourceManager.GetString("ClearFilters", Resources.SharedResources.Culture)">
                <i class="fas fa-times"></i>
            </button>
        </div>
        }
        <div class="ml-2 pr-3 d-flex flex-row flex-noshrink" style="line-height: 2.75rem;">
            <button class="btn" type="button" @onclick="(() => HandleConfigureClick())"
                    aria-label="@Resources.SharedResources.ResourceManager.GetString("EditFilters", Resources.SharedResources.Culture)">
                <i class="fas fa-cog"></i>
            </button>
        </div>
    </div>

</div>