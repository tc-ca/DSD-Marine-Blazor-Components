@page "/"
@using DSD.MSS.Blazor.Components.Table;
@using DSD.MSS.Blazor.Components.Table.Demo.Model;
@using DSD.MSS.Blazor.Components.Table.Demo.Data;
@using System.Globalization;
@using Microsoft.AspNetCore.Components.Forms;
@using DSD.MSS.Blazor.Components.Table.Models;
@using Microsoft.Extensions.Caching.Memory;
@using Microsoft.AspNetCore.Http;
@inject IMemoryCache memoryCache

<h1>Table Component</h1>

<div class="row well">
    <div class="col-12">
        <div class="card  mb-3 mt-3">
            <div class="card-body">
                <div class="flex-row flex-grow mb-3 mt-3">
                    <div class="flex-row ml-auto">
                        <button type="button" aria-label="show" class="btn btn-secondary" @onclick="()=>ToggleLastNameFilter()">
                            Toggle LastName Filter
                        </button>
                        <button type="button" aria-label="show" class="btn btn-secondary" @onclick="()=>ToggleFirstNameFilter()">
                            Toggle FirstName Filter
                        </button>
                        <button type="button" aria-label="Refresh" class="btn btn-secondary">
                            <i aria-hidden="true" class="fas fa-redo-alt"></i>
                        </button>
                        <button type="button" aria-label="Toggle Filter" class="btn btn-secondary ml-2" @onclick=@(() => HandleFilterButtonClick())>
                            <i aria-hidden="true" class="fas fa-filter"></i>
                        </button>
                    </div>
                </div>

                <Table TableClass="table table-striped table-hover" TableItem="TableModel" SearchPlaceHolderText="Search ..."
                       @ref="TableRef" DefaultPageSize="10" OnAfterDataLoaded="OnAfterTableDataLoaded" ShowSearchBar="@ShowFilterHeader"
                       Items="tableData" HeaderFilterChanged="@(()=>HandleHeaderFilterChanged())"
                       FilterChanged="(e)=>OnFilterChanged(e)">
                    <Column TableItem="TableModel" Title="#" Field="@(x => x.Id)" DefaultShowColumn="true" DefaultShowHeaderFilter="false" Sortable="false" Width="25%" />
                    <Column TableItem="TableModel" Title="First Name" Field="@(x => x.FirstName)" DefaultShowHeaderFilter="true" Sortable="true" Width="25%" />
                    <Column TableItem="TableModel" Title="Last Name" Field="@(x => x.LastName)" DefaultShowHeaderFilter="true" Sortable="true" Width="25%" />
                    <Column TableItem="TableModel" Title="Handle" Field="@(x => x.Handle)" DefaultShowHeaderFilter="true" Sortable="true" Width="25%" />
                    <Pager ShowPageNumber="true" ShowTotalCount="true" />
                </Table>

                <Table TableClass="table table-striped table-hover" TableItem="TableModel" SearchPlaceHolderText="Search ..."
                       @ref="TableRef" DefaultPageSize="10" OnAfterDataLoaded="OnAfterTableDataLoaded" ShowSearchBar="@ShowFilterHeader"
                       Items="tableData" HeaderFilterChanged="@(()=>HandleHeaderFilterChanged())"
                       FilterChanged="(e)=>OnFilterChanged(e)" ShowClearFilterOnTop="true">
                    <Column TableItem="TableModel" Title="#" Field="@(x => x.Id)" DefaultShowColumn="true" DefaultShowHeaderFilter="false" Sortable="false" Width="25%" />
                    <Column TableItem="TableModel" Title="First Name" Field="@(x => x.FirstName)" DefaultShowHeaderFilter="true" Sortable="true" Width="25%" />
                    <Column TableItem="TableModel" Title="Last Name" Field="@(x => x.LastName)" DefaultShowHeaderFilter="true" Sortable="true" Width="25%" />
                    <Column TableItem="TableModel" Title="Handle" Field="@(x => x.Handle)" DefaultShowHeaderFilter="true" Sortable="true" Width="25%" />
                    <Pager ShowPageNumber="true" ShowTotalCount="true" />
                </Table>
            </div>
        </div>
    </div>
</div>

@code {

    private const string tableSettingKey = "TableSettings";
    protected List<TableModel>
    tableData = new List<TableModel>();
    protected bool LastNameFilter { get; set; } = true;
    protected bool FirstNameFilter { get; set; } = true;
    protected bool ShowFilterHeader { get; set; } = true;
    protected TableSettings<TableModel> tableSettings { get; set; }

    protected Table<TableModel> TableRef { get; set; }

    public void OnFilterChanged(TableSettings<TableModel> settings)
    {

        var cacheOptions = new MemoryCacheEntryOptions()
        {
            AbsoluteExpiration = DateTime.Now.AddHours(2)
        };

        if (TableRef != null)
        {
            memoryCache.Set("TableSettings", settings);
        }
    }

    private void ToggleLastNameFilter()
    {
        LastNameFilter = !LastNameFilter;
        TableRef.Update();
    }

    private void ToggleFirstNameFilter()
    {
        FirstNameFilter = !FirstNameFilter;
        TableRef.Update();
    }

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(TimeSpan.FromSeconds(5));
        tableData = TableData.GetData();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (memoryCache.TryGetValue("TableSettings", out TableSettings<TableModel> settings))
            {
                tableSettings = settings;
                TableRef.Update();
            }
        }
    }

    protected void OnAfterTableDataLoaded()
    {
        if (tableSettings != null)
        {
            TableRef.ResetTableSettings(tableSettings);
            TableRef.UpdatePage(tableSettings.PageNumber);
            tableSettings = null;
        }
    }

    protected void HandleHeaderFilterChanged()
    {
        StateHasChanged();
    }
    protected void HandleFilterButtonClick()
    {
        ShowFilterHeader = !ShowFilterHeader;
    }
}
